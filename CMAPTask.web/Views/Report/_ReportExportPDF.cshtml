@using Microsoft.AspNetCore.Html
@model OpenBanking.web.ViewModel.AccountTransactionsViewModel

@{
    Layout = null;
}

@functions {
    public string FormatDateSafe(string dateStr, string format = "dd/MM/yyyy")
    {
        if (DateTime.TryParse(dateStr, out var date))
            return date.ToString(format);
        return dateStr ?? "N/A";
    }
    public string FormatCurrency(decimal amount, string currency)
    {
        return $"{amount:N2} {currency}";
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Transaction Report - @Model.Currency</title>
    <style>
        @@page {
            size: A4;
            margin: 20mm 15mm 20mm 15mm;

            @@top-center {
                content: "Transaction Report - Confidential";
                font-size: 10pt;
                color: #555;
            }

            @@bottom-center {
                content: "© OpenBanking Inc.  |  Page " counter(page) " of " counter(pages) "  |  Generated: " date();
                font-size: 9pt;
                color: #999;
            }
        }

        body {
            font-family: 'Segoe UI', Tahoma, sans-serif;
            font-size: 10pt;
            color: #222;
            margin: 0;
            padding: 0;
        }

        .header {
            text-align: center;
            margin-bottom: 15px;
            position: relative;
        }

            .header img {
                position: absolute;
                top: 0;
                left: 0;
                height: 60px;
            }

            .header h1 {
                font-size: 18pt;
                margin: 0;
                color: #1a1a1a;
            }

            .header hr {
                border: none;
                height: 1px;
                background-color: #ccc;
                margin: 8px 0;
            }

        .header-details {
            font-size: 9pt;
            color: #555;
            margin-top: 4px;
        }

        .section {
            margin: 10mm 0;
            page-break-inside: avoid;
        }

            .section h2 {
                font-size: 14pt;
                color: #1a1a1a;
                margin-bottom: 6pt;
                font-weight: 600;
            }

        table.data-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 10pt;
        }

        .data-table th, .data-table td {
            border: 1px solid #ccc;
            padding: 6pt 8pt;
            text-align: left;
        }

        .data-table th {
            background-color: #f5f5f5;
            font-weight: 600;
            color: #333;
        }

        .data-table tr:nth-child(even) {
            background-color: #fafafa;
        }

        .transactions-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 9pt;
        }

            .transactions-table th, .transactions-table td {
                border: 1px solid #ccc;
                padding: 6pt 8pt;
            }

            .transactions-table th {
                background-color: #f0f0f0;
                text-transform: uppercase;
                font-weight: bold;
                color: #333;
            }

            .transactions-table tbody tr:nth-child(even) {
                background-color: #f9f9f9;
            }

        .table-danger {
            background-color: #fef0f0 !important;
        }

        .risk-high {
            color: #a94442;
            font-weight: 600;
        }

        .risk-low {
            color: #3c763d;
            font-weight: 600;
        }
    </style>
</head>
<body>

    <!-- HEADER -->
    <div class="header">
        <img src="~/img/openvista-logo.svg" width="130px" />
        <h1>Transaction Report</h1>
        <div class="header-details">
            Client: @Model.CustomerName  | 
            Currency: @Model.Currency  | 
            Period:   @if (Model.CreatedAt.HasValue)
            {
                <span class="badge bg-secondary smaller-text">
                    @(Model.CreatedAt.Value.AddDays(-90).ToString("dd MMM yyyy")) - @(Model.CreatedAt.Value.ToString("dd MMM yyyy"))
                </span>
            }  | 
            Generated: @(DateTime.Now.ToString("dd MMM yyyy HH:mm")) BST
        </div>
        <hr />
    </div>

    <!-- SUMMARY SECTION -->
    <div class="section">
        <h2>Summary Metrics</h2>
        <table class="data-table">
            <tr><th>Metric</th><th>Value</th></tr>
            <tr><td>Total Inflows</td><td>@FormatCurrency(Model.RiskSummary.TotalInflows, Model.Currency)</td></tr>
            <tr><td>Total Outflows</td><td>@FormatCurrency(Model.RiskSummary.TotalOutflows, Model.Currency)</td></tr>
            <tr><td>Net Balance</td><td>@FormatCurrency(Model.RiskSummary.NetBalance, Model.Currency)</td></tr>
            @{
                var totalTransactions = Model.Transactions.Transactions.Booked.Count() + Model.Transactions.Transactions.Pending.Count();
                var highRiskPercentage = totalTransactions > 0 ? (Model.HighRiskTransactions.Count() * 100.0 / totalTransactions) : 0;
                var totalInflows = Model.RiskSummary.TotalInflows;
                var totalOutflows = Model.RiskSummary.TotalOutflows;
                var total = totalInflows + totalOutflows;
                var inflowsPercentage = total > 0 ? (totalInflows / total) * 100 : 0;
                var outflowsPercentage = total > 0 ? (totalOutflows / total) * 100 : 0;
            }
            <tr><td>High-Risk %</td><td>@highRiskPercentage.ToString("F2")%</td></tr>
            <tr><td>Inflows vs Outflows</td><td>@inflowsPercentage.ToString("F2")% / @outflowsPercentage.ToString("F2")%</td></tr>
        </table>
    </div>

    <!-- RISK OVERVIEW SECTION -->
    <div class="section">
        <h2>Risk Overview</h2>
        <table class="data-table">
            <tr><th>Category</th><th>Value</th></tr>
            <tr>
                <td>Risk Level</td>
                <td style="color:@(Model.RiskSummary.RiskLevel == "High" ? "#a94442" : (Model.RiskSummary.RiskLevel == "Low" ? "#3c763d" : "#333"))">
                    @Model.RiskSummary.RiskLevel
                </td>
            </tr>
            <tr>
                <td>High-Value Transactions</td>
                <td>
                    @Model.RiskSummary.HighValueTransactionCount @(Model.RiskSummary.HighValueTransactionCount > 5 ? "(High Risk)" : "")
                </td>
            </tr>
            <tr><td>Total Rent</td><td>@FormatCurrency(Model.RiskSummary.TotalRent, Model.Currency)</td></tr>
            <tr>
                <td>Total Gambling</td>
                <td>
                    @FormatCurrency(Model.RiskSummary.TotalGambling, Model.Currency) @(Model.RiskSummary.TotalGambling > 5000 ? "(High Risk)" : "")
                </td>
            </tr>
            <tr><td>High-Risk Merchants</td><td>@FormatCurrency(Model.RiskSummary.TotalHighRiskMerchant, Model.Currency)</td></tr>
            <tr><td>Total Benefits</td><td>@FormatCurrency(Model.RiskSummary.TotalBenefits, Model.Currency)</td></tr>
            <tr>
                <td>Debt-to-Income Ratio</td>
                <td style="color:@(Model.RiskSummary.DebtToIncomeRatio <= 36 ? "#3c763d" : Model.RiskSummary.DebtToIncomeRatio <= 40 ? "#333" : "#a94442")">
                    @Model.RiskSummary.DebtToIncomeRatio.ToString("F2")% @(Model.RiskSummary.DebtToIncomeRatio > 40 ? "(High Risk)" : "")
                </td>
            </tr>
            <tr>
                <td>Disposable Income</td>
                <td style="color:@(Model.RiskSummary.DisposableIncome >= 0 ? "#3c763d" : "#a94442")">
                    @FormatCurrency(Model.RiskSummary.DisposableIncome, Model.Currency) @(Model.RiskSummary.DisposableIncome < 0 ? "(High Risk)" : "")
                </td>
            </tr>
        </table>
    </div>

    <!-- RISK ASSESSMENTS SECTION -->
    <div class="section">
        <h2>Risk Assessments</h2>
        <table class="data-table">
            <tr><th>Assessment</th><th>Result</th></tr>
            <tr>
                <td>Affordability</td>
                <td style="color:@(Model.RiskSummary.AffordabilityAssessment?.Contains("Affordable") == true ? "#3c763d" : "#a94442")">
                    @Model.RiskSummary.AffordabilityAssessment
                </td>
            </tr>
            <tr>
                <td>Insolvency Risk</td>
                <td style="color:@(Model.RiskSummary.InsolvencyRisk?.Contains("Low") == true ? "#3c763d" : "#a94442")">
                    @Model.RiskSummary.InsolvencyRisk
                </td>
            </tr>
        </table>
    </div>

    <!-- RISK ALERTS SECTION -->
    <div class="section">
        <h2>Risk Alerts</h2>
        @if (Model.RiskSummary.RiskAlerts.Any())
        {
            <table class="data-table">
                <tr><th>Alert</th><th>Detail</th></tr>
                @foreach (var alert in Model.RiskSummary.RiskAlerts)
                {
                    <tr>
                        <td>@alert.Split(" totaling ")[0]</td>
                        <td>@alert</td>
                    </tr>
                }
            </table>
        }
        else
        {
            <p>No risk alerts detected.</p>
        }
    </div>

    <!-- BOOKED TRANSACTIONS -->
    <div class="section" style="page-break-before: always;">
        <h2>Booked Transactions (@Model.Transactions.Transactions.Booked.Count())</h2>
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Party</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Risk</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in Model.Transactions.Transactions.Booked)
                {
                    <tr class="@(Model.HighRiskTransactions.Contains(transaction) ? "table-danger" : "")">
                        <td>@transaction.TransactionId</td>
                        <td>@FormatDateSafe(transaction.BookingDate)</td>
                        <td>
                            @{
                                decimal amount;
                                var isParsed = decimal.TryParse(transaction.TransactionAmount.Amount, out amount);
                            }
                            @(isParsed ? FormatCurrency(amount, transaction.TransactionAmount.Currency) : transaction.TransactionAmount.Amount)
                        </td>
                        <td>@(transaction.CreditorName ?? transaction.DebtorName ?? "Unknown")</td>
                        <td>@transaction.RemittanceInformationUnstructured</td>
                        <td>@transaction.ProprietaryBankTransactionCode</td>
                        <td>
                            <span class="@(Model.HighRiskTransactions.Contains(transaction) ? "risk-high" : "risk-low")">
                                @(Model.HighRiskTransactions.Contains(transaction) ? "High Risk" : "Low Risk")
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- PENDING TRANSACTIONS -->
    <div class="section">
        <h2>Pending Transactions (@Model.Transactions.Transactions.Pending.Count())</h2>
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Party</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Risk</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in Model.Transactions.Transactions.Pending)
                {
                    <tr class="@(Model.HighRiskTransactions.Contains(transaction) ? "table-danger" : "")">
                        <td>@transaction.TransactionId</td>
                        <td>@FormatDateSafe(transaction.BookingDate)</td>
                        <td>
                            @{
                                decimal amount;
                                var isParsed = decimal.TryParse(transaction.TransactionAmount.Amount, out amount);
                            }
                            @(isParsed ? FormatCurrency(amount, transaction.TransactionAmount.Currency) : transaction.TransactionAmount.Amount)
                        </td>
                        <td>@(transaction.CreditorName ?? transaction.DebtorName ?? "Unknown")</td>
                        <td>@transaction.RemittanceInformationUnstructured</td>
                        <td>@transaction.ProprietaryBankTransactionCode</td>
                        <td>
                            <span class="@(Model.HighRiskTransactions.Contains(transaction) ? "risk-high" : "risk-low")">
                                @(Model.HighRiskTransactions.Contains(transaction) ? "High Risk" : "Low Risk")
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</body>
</html>